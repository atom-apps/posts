// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"time"

	"github.com/atom-apps/posts/common"
	"github.com/atom-apps/posts/common/consts"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

const TableNameArticle = "articles"

// Article mapped from table <articles>
type Article struct {
	ID          uint64                   `gorm:"column:id;type:bigint unsigned;primaryKey;autoIncrement:true;comment:ID" json:"id"`      // ID
	CreatedAt   time.Time                `gorm:"column:created_at;type:datetime(3);comment:创建时间" json:"created_at"`                      // 创建时间
	UpdatedAt   time.Time                `gorm:"column:updated_at;type:datetime(3);comment:更新时间" json:"updated_at"`                      // 更新时间
	DeletedAt   gorm.DeletedAt           `gorm:"column:deleted_at;type:datetime(3);comment:删除时间" json:"deleted_at" swaggertype:"string"` // 删除时间
	TenantID    uint64                   `gorm:"column:tenant_id;type:bigint unsigned;comment:租户ID" json:"tenant_id"`                    // 租户ID
	UserID      uint64                   `gorm:"column:user_id;type:bigint unsigned;comment:用户ID" json:"user_id"`                        // 用户ID
	UUID        string                   `gorm:"column:uuid;type:varchar(64);not null;comment:UUID" json:"uuid"`                         // UUID
	BookID      uint64                   `gorm:"column:book_id;type:bigint unsigned;comment:书ID" json:"book_id"`                         // 书ID
	ChapterID   uint64                   `gorm:"column:chapter_id;type:bigint unsigned;comment:章节ID" json:"chapter_id"`                  // 章节ID
	CategoryID  uint64                   `gorm:"column:category_id;type:bigint unsigned;comment:分类" json:"category_id"`                  // 分类
	PublishAt   time.Time                `gorm:"column:publish_at;type:datetime(3);comment:发布时间" json:"publish_at"`                      // 发布时间
	Type        consts.ArticleType       `gorm:"column:type;type:int;not null;comment:文章类型" json:"type"`                                 // 文章类型
	Format      consts.ArticleFormat     `gorm:"column:format;type:int;not null;comment:文章格式" json:"format"`                             // 文章格式
	Title       string                   `gorm:"column:title;type:varchar(128);not null;comment:标题" json:"title"`                        // 标题
	Keyword     string                   `gorm:"column:keyword;type:varchar(256);not null;comment:关键词" json:"keyword"`                   // 关键词
	Description string                   `gorm:"column:description;type:varchar(256);not null;comment:简介" json:"description"`            // 简介
	Thumbnails  common.ArticleThumbnails `gorm:"column:thumbnails;type:text;not null;comment:缩略图" json:"thumbnails"`                     // 缩略图
	Videos      common.ArticleVideos     `gorm:"column:videos;type:text;not null;comment:视频" json:"videos"`                              // 视频
	Audios      common.ArticleAudios     `gorm:"column:audios;type:text;not null;comment:音频" json:"audios"`                              // 音频
	PostIP      string                   `gorm:"column:post_ip;type:varchar(128);comment:发布IP" json:"post_ip"`                           // 发布IP
	Weight      uint64                   `gorm:"column:weight;type:bigint unsigned;comment:权重" json:"weight"`                            // 权重
}

func (*Article) TableName(namer schema.Namer) string {
	if namer == nil {
		return TableNameArticle
	}
	return namer.TableName(TableNameArticle)
}
