// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/atom-apps/posts/database/models"
)

func newArticleAttachment(db *gorm.DB, opts ...gen.DOOption) articleAttachment {
	_articleAttachment := articleAttachment{}

	_articleAttachment.articleAttachmentDo.UseDB(db, opts...)
	_articleAttachment.articleAttachmentDo.UseModel(&models.ArticleAttachment{})

	tableName := _articleAttachment.articleAttachmentDo.TableName()
	_articleAttachment.ALL = field.NewAsterisk(tableName)
	_articleAttachment.ID = field.NewUint64(tableName, "id")
	_articleAttachment.CreatedAt = field.NewTime(tableName, "created_at")
	_articleAttachment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_articleAttachment.DeletedAt = field.NewField(tableName, "deleted_at")
	_articleAttachment.TenantID = field.NewUint64(tableName, "tenant_id")
	_articleAttachment.UserID = field.NewUint64(tableName, "user_id")
	_articleAttachment.ArticleID = field.NewUint64(tableName, "article_id")
	_articleAttachment.FilesystemID = field.NewUint64(tableName, "filesystem_id")
	_articleAttachment.Description = field.NewString(tableName, "description")
	_articleAttachment.Password = field.NewString(tableName, "password")

	_articleAttachment.fillFieldMap()

	return _articleAttachment
}

type articleAttachment struct {
	articleAttachmentDo articleAttachmentDo

	ALL          field.Asterisk
	ID           field.Uint64 // ID
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间
	TenantID     field.Uint64 // 租户ID
	UserID       field.Uint64 // 用户ID
	ArticleID    field.Uint64 // 文章ID
	FilesystemID field.Uint64 // 文件系统ID
	Description  field.String // 文件描述
	Password     field.String // 文件密码

	fieldMap map[string]field.Expr
}

func (a articleAttachment) Table(newTableName string) *articleAttachment {
	a.articleAttachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleAttachment) As(alias string) *articleAttachment {
	a.articleAttachmentDo.DO = *(a.articleAttachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleAttachment) updateTableName(table string) *articleAttachment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.TenantID = field.NewUint64(table, "tenant_id")
	a.UserID = field.NewUint64(table, "user_id")
	a.ArticleID = field.NewUint64(table, "article_id")
	a.FilesystemID = field.NewUint64(table, "filesystem_id")
	a.Description = field.NewString(table, "description")
	a.Password = field.NewString(table, "password")

	a.fillFieldMap()

	return a
}

func (a *articleAttachment) WithContext(ctx context.Context) IArticleAttachmentDo {
	return a.articleAttachmentDo.WithContext(ctx)
}

func (a articleAttachment) TableName() string { return a.articleAttachmentDo.TableName() }

func (a articleAttachment) Alias() string { return a.articleAttachmentDo.Alias() }

func (a articleAttachment) Columns(cols ...field.Expr) gen.Columns {
	return a.articleAttachmentDo.Columns(cols...)
}

func (a *articleAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleAttachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["tenant_id"] = a.TenantID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["filesystem_id"] = a.FilesystemID
	a.fieldMap["description"] = a.Description
	a.fieldMap["password"] = a.Password
}

func (a articleAttachment) clone(db *gorm.DB) articleAttachment {
	a.articleAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleAttachment) replaceDB(db *gorm.DB) articleAttachment {
	a.articleAttachmentDo.ReplaceDB(db)
	return a
}

type articleAttachmentDo struct{ gen.DO }

type IArticleAttachmentDo interface {
	gen.SubQuery
	Debug() IArticleAttachmentDo
	WithContext(ctx context.Context) IArticleAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleAttachmentDo
	WriteDB() IArticleAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleAttachmentDo
	Not(conds ...gen.Condition) IArticleAttachmentDo
	Or(conds ...gen.Condition) IArticleAttachmentDo
	Select(conds ...field.Expr) IArticleAttachmentDo
	Where(conds ...gen.Condition) IArticleAttachmentDo
	Order(conds ...field.Expr) IArticleAttachmentDo
	Distinct(cols ...field.Expr) IArticleAttachmentDo
	Omit(cols ...field.Expr) IArticleAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IArticleAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleAttachmentDo
	Group(cols ...field.Expr) IArticleAttachmentDo
	Having(conds ...gen.Condition) IArticleAttachmentDo
	Limit(limit int) IArticleAttachmentDo
	Offset(offset int) IArticleAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleAttachmentDo
	Unscoped() IArticleAttachmentDo
	Create(values ...*models.ArticleAttachment) error
	CreateInBatches(values []*models.ArticleAttachment, batchSize int) error
	Save(values ...*models.ArticleAttachment) error
	First() (*models.ArticleAttachment, error)
	Take() (*models.ArticleAttachment, error)
	Last() (*models.ArticleAttachment, error)
	Find() ([]*models.ArticleAttachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ArticleAttachment, err error)
	FindInBatches(result *[]*models.ArticleAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ArticleAttachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleAttachmentDo
	Assign(attrs ...field.AssignExpr) IArticleAttachmentDo
	Joins(fields ...field.RelationField) IArticleAttachmentDo
	Preload(fields ...field.RelationField) IArticleAttachmentDo
	FirstOrInit() (*models.ArticleAttachment, error)
	FirstOrCreate() (*models.ArticleAttachment, error)
	FindByPage(offset int, limit int) (result []*models.ArticleAttachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleAttachmentDo) Debug() IArticleAttachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a articleAttachmentDo) WithContext(ctx context.Context) IArticleAttachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleAttachmentDo) ReadDB() IArticleAttachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleAttachmentDo) WriteDB() IArticleAttachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleAttachmentDo) Session(config *gorm.Session) IArticleAttachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleAttachmentDo) Clauses(conds ...clause.Expression) IArticleAttachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleAttachmentDo) Returning(value interface{}, columns ...string) IArticleAttachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleAttachmentDo) Not(conds ...gen.Condition) IArticleAttachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleAttachmentDo) Or(conds ...gen.Condition) IArticleAttachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleAttachmentDo) Select(conds ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleAttachmentDo) Where(conds ...gen.Condition) IArticleAttachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleAttachmentDo) Order(conds ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleAttachmentDo) Distinct(cols ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleAttachmentDo) Omit(cols ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleAttachmentDo) Join(table schema.Tabler, on ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleAttachmentDo) Group(cols ...field.Expr) IArticleAttachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleAttachmentDo) Having(conds ...gen.Condition) IArticleAttachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleAttachmentDo) Limit(limit int) IArticleAttachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleAttachmentDo) Offset(offset int) IArticleAttachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleAttachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleAttachmentDo) Unscoped() IArticleAttachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleAttachmentDo) Create(values ...*models.ArticleAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleAttachmentDo) CreateInBatches(values []*models.ArticleAttachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleAttachmentDo) Save(values ...*models.ArticleAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleAttachmentDo) First() (*models.ArticleAttachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ArticleAttachment), nil
	}
}

func (a articleAttachmentDo) Take() (*models.ArticleAttachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ArticleAttachment), nil
	}
}

func (a articleAttachmentDo) Last() (*models.ArticleAttachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ArticleAttachment), nil
	}
}

func (a articleAttachmentDo) Find() ([]*models.ArticleAttachment, error) {
	result, err := a.DO.Find()
	return result.([]*models.ArticleAttachment), err
}

func (a articleAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ArticleAttachment, err error) {
	buf := make([]*models.ArticleAttachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleAttachmentDo) FindInBatches(result *[]*models.ArticleAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleAttachmentDo) Attrs(attrs ...field.AssignExpr) IArticleAttachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleAttachmentDo) Assign(attrs ...field.AssignExpr) IArticleAttachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleAttachmentDo) Joins(fields ...field.RelationField) IArticleAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleAttachmentDo) Preload(fields ...field.RelationField) IArticleAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleAttachmentDo) FirstOrInit() (*models.ArticleAttachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ArticleAttachment), nil
	}
}

func (a articleAttachmentDo) FirstOrCreate() (*models.ArticleAttachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ArticleAttachment), nil
	}
}

func (a articleAttachmentDo) FindByPage(offset int, limit int) (result []*models.ArticleAttachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleAttachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleAttachmentDo) Delete(models ...*models.ArticleAttachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleAttachmentDo) withDO(do gen.Dao) *articleAttachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
